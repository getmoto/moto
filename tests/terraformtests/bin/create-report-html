#!/usr/bin/python3

import glob
import os
import xml.etree.ElementTree as ET
from shutil import which

target_dir = 'target/reports-html'


def render(src, dest):
    os.system(f'junit2html {src} {dest}')


def create_test_reports(reports, target=target_dir):
    files = []
    for f in reports:

        f_html = os.path.basename(f[:-4]) + '.html'
        f_html = os.path.join(target, f_html)

        if os.path.exists(f_html):
            print('skipping', f_html)
            continue

        print(f_html)
        render(f, f_html)
        files.append(f_html)

    return files


def parse_testsuite_meta(source):
    for event, elem in ET.iterparse(source, events=('start',)):
        if elem.tag == 'testsuite':
            d = dict(elem.attrib)
            d['time'] = float(d['time'])
            d['tests'] = int(d['tests'])
            d['errors'] = int(d['errors'])
            d['failures'] = int(d['failures'])
            d['skipped'] = int(d['skipped'])
            d['passed'] = d['tests'] - (d['errors'] + d['failures'] + d['skipped'])

            return d

    return None


def create_summary(reports):
    testsuites = []

    for f in reports:
        with open(f, 'r') as fd:
            try:
                ts = parse_testsuite_meta(fd)
                if ts:
                    ts['report'] = os.path.basename(f[:-4] + '.html')
                    testsuites.append(ts)
            except Exception as e:
                print('Unable to parse test suite metadata from report %s: %s' % (f, e))

    summary = {'tests': 0, 'skipped': 0, 'failures': 0, 'errors': 0, 'passed': 0, 'time': 0}

    for ts in testsuites:
        for k in summary.keys():
            summary[k] += ts.get(k, 0)

    summary['time'] = round(summary['time'], 2)

    for k in ('skipped', 'failures', 'errors', 'passed'):
        if summary['tests'] == 0:
            summary[k + '%'] = 0
        else:
            summary[k + '%'] = round((summary[k] / summary['tests']) * 100, 2)

    return testsuites, summary


def render_summary(testsuites, summary):
    # TODO: use jinja templates and render a proper summary page

    html = '<html><head><title>Summary</title></head><body>'

    html += '<table border="1">'
    html += '<tr><th>Results</th><th>Number</th><th>%</th></tr>'
    for k in ('passed', 'failures', 'errors', 'skipped'):
        html += f'<tr><td>{k}</td><td>{summary[k]}</td><td>{summary[k + "%"]}</td></tr>'

    html += f'<tr><td><b>Total</b></td><td>{summary["tests"]}</td><td>100%</td></tr>'

    html += '</table><hr>'

    html += '<table border="1"><tr><th>Test</th><th>Tests</th><th>Passed</th><th>Failed</th><th>Errored</th><th>Skipped</th></tr>'
    for ts in testsuites:
        html += '<tr><td><a href="./{report}">{name}</a></td><td>{tests}</td><td>{passed}</td><td>{failures}</td><td>{errors}</td><td>{skipped}</td></tr>'.format(
            **ts)

    html += '</table>'

    html += '</body></html>'
    return html


def main():
    reports = glob.glob('target/reports-xunit/*.xml')
    os.makedirs(target_dir, exist_ok=True)

    if not reports:
        print('no reports, run bin/create-report first')
        exit(1)

    if not which('junit2html'):
        print('junit2html not found in path, please install it with: pip install junit2html')
        exit(1)

    reports.sort()

    create_test_reports(reports)
    testsuites, summary = create_summary(reports)

    with open('target/reports-html/index.html', 'w') as fd:
        fd.write(render_summary(testsuites, summary))

    print('===========================================')
    print('report created')
    print()

    if which('open'):
        print(f'open {target_dir}/index.html')
    elif which('xdg-open'):
        print(f'xdg-open {target_dir}/index.html')


if __name__ == '__main__':
    main()
