#!/bin/bash

pwd=$PWD

(
cd terraform-provider-aws || exit
PATCH="etc/0002-hardcode-local-endpoints.patch"
git apply $pwd/${PATCH}
PATCH="etc/0003-route53-reduce-sync-time.patch"
git apply $pwd/${PATCH}
)

# list extracted from localstack_client/config.py
LS_SERVICES=(acm amplify apigateway apigatewaymanagementapi apigatewayv2 appconfig appautoscaling appsync athena autoscaling backup batch ce cloudformation cloudfront cloudsearch cloudtrail cloudwatch codecommit cognitoidentity cognitoidp config configservice docdb dynamodb dynamodbstreams ec2 ecr ecs efs eks elasticache elasticbeanstalk elasticsearch elb elbv2 emr es events firehose glacier glue iam iot iotanalytics iotevents kafka kinesis kinesisanalytics kinesisanalyticsv2 kms lakeformation lambda logs mediaconvert mediastore mq neptune opensearch organizations qldb rds redshift resourcegroups resourcegroupstaggingapi route53 route53resolver s3 s3control sagemaker secretsmanager serverlessrepo servicediscovery ses sesv2 sns sqs ssm stepfunctions sts support swf timestream timestreamquery timestreamwrite transfer waf wafv2 xray)

function replaceInFile() {
  if [[ $1 == *"(" ]]; then
    search=$1
    replace="${search%?}$2("
  else
    search=$1'\([^a-zA-Z0-9_]\)'
    replace=$1$2'\2'
  fi
  sed -i '' -e 's/\([[:space:]!({]\)'$search'/\1'$replace'/g' $3
}

function isInList() {
  array="${@:2}"
  for item in $array; do
      [[ "$1" == "$item" ]] && echo 1
  done
}

function isHandledService() {
  isInList $1 "${LS_SERVICES[@]}"
}

(
cd terraform-provider-aws || exit
combinedFolder=internal/allservices
mkdir -p $combinedFolder

for d in internal/service/*; do
  echo $d
  service=$(echo $d | cut -f3 -d /)
  echo $service
  if [ $service == "secretsmanager" ]; then
   # TODO remove!
   break
  fi
  if [ "$(isHandledService $service)" != "1" ]; then
    continue
  fi

  for f in internal/service/$service/*; do
    fname=$(echo $f | cut -f4 -d /)
    echo $service/$fname
    targetFile=$combinedFolder/${service}_${fname}

    if [ -e $targetFile ]; then
      continue
    fi
    if [ -d internal/service/$service/$fname ]; then
      continue
    fi

    cp internal/service/$service/$fname $targetFile

    # apply patches
    sed -i '' -e 's/^package '$service'/package awstest/' $targetFile

    # common replacements
    replaceInFile propagationTimeout $service $targetFile
    replaceInFile "testAccPreCheck(" $service $targetFile
    replaceInFile "GetTag(" $service $targetFile
    replaceInFile "ListTags(" $service $targetFile
    replaceInFile "Tags(" $service $targetFile
    replaceInFile "KeyValueTags(" $service $targetFile
    replaceInFile "UpdateTags(" $service $targetFile

    if [[ "$service" == acm ]]; then
      replaceInFile "ResourceCertificate(" $service $targetFile
      replaceInFile "DataSourceCertificate(" $service $targetFile
      replaceInFile dataSourceCertificateRead $service $targetFile
      replaceInFile resourceCertificateCreate $service $targetFile
      replaceInFile resourceCertificateRead $service $targetFile
    fi

    if [[ "$service" == apigateway* ]]; then
      replaceInFile testAccCheckDeploymentDestroy $service $targetFile
      replaceInFile testAccCheckDeploymentDestroy $service $targetFile
      replaceInFile testAccAuthorizerImportStateIdFunc $service $targetFile
      replaceInFile testAccCheckDeploymentExists $service $targetFile
      replaceInFile resourceDeploymentRead $service $targetFile
      replaceInFile testAccCheckDeploymentNotRecreated $service $targetFile
      replaceInFile testAccCheckIntegrationResponseExists $service $targetFile
      replaceInFile testAccErrorCheckSkip $service $targetFile
      replaceInFile resourceDeploymentCreate $service $targetFile
      replaceInFile resourceAuthorizerDelete $service $targetFile
      replaceInFile resourceAuthorizerRead $service $targetFile
      replaceInFile resourceDomainNameRead $service $targetFile
      replaceInFile resourceDomainNameCreate $service $targetFile
      replaceInFile resourceDeploymentDelete $service $targetFile
      replaceInFile resourceDeploymentUpdate $service $targetFile
      replaceInFile resourceAuthorizerUpdate $service $targetFile
      replaceInFile resourceAuthorizerCreate $service $targetFile
      replaceInFile testAccCheckAuthorizerDestroy $service $targetFile
      replaceInFile testAccCheckAuthorizerExists $service $targetFile
      replaceInFile testAccCheckDeploymentRecreated $service $targetFile
      replaceInFile testAccDeploymentTriggersConfig $service $targetFile
      replaceInFile testAccCheckDomainNameDestroy $service $targetFile
      replaceInFile testAccCheckDomainNameExists $service $targetFile
      replaceInFile testAccDomainNamePublicCertConfig $service $targetFile
      replaceInFile testAccCheckIntegrationDestroy $service $targetFile
      replaceInFile testAccCheckIntegrationExists $service $targetFile
      replaceInFile testAccIntegrationResponseImportStateIdFunc $service $targetFile
      replaceInFile testAccCheckIntegrationResponseDestroy $service $targetFile
      replaceInFile testAccCheckModelExists $service $targetFile
      replaceInFile testAccCheckModelDestroy $service $targetFile
      replaceInFile testAccModelImportStateIdFunc $service $targetFile
      replaceInFile testAccCheckStageDestroy $service $targetFile
      replaceInFile testAccCheckStageExists $service $targetFile
      replaceInFile testAccIntegrationImportStateIdFunc $service $targetFile
      replaceInFile testAccStageImportStateIdFunc $service $targetFile
      replaceInFile testAccStageConfig_accessLogSettings $service $targetFile
      replaceInFile testAccCheckVPCLinkDestroy $service $targetFile
      replaceInFile testAccCheckVPCLinkExists $service $targetFile
      replaceInFile testAccDeploymentBaseConfig $service $targetFile
      replaceInFile testAccRouteImportStateIdFunc $service $targetFile
      replaceInFile resourceDomainNameUpdate $service $targetFile
      replaceInFile resourceDomainNameDelete $service $targetFile
      replaceInFile expandMutualTLSAuthentication $service $targetFile
      replaceInFile flattenMutualTLSAuthentication $service $targetFile
      replaceInFile dataSourceExportRead $service $targetFile
      replaceInFile resourceIntegrationCreate $service $targetFile
      replaceInFile resourceIntegrationRead $service $targetFile
      replaceInFile resourceIntegrationUpdate $service $targetFile
      replaceInFile resourceIntegrationResponseCreate $service $targetFile
      replaceInFile resourceIntegrationResponseRead $service $targetFile
      replaceInFile resourceIntegrationResponseDelete $service $targetFile
      replaceInFile resourceIntegrationDelete $service $targetFile
      replaceInFile resourceModelCreate $service $targetFile
      replaceInFile resourceModelRead $service $targetFile
      replaceInFile resourceModelUpdate $service $targetFile
      replaceInFile resourceModelDelete $service $targetFile
      replaceInFile resourceStageCreate $service $targetFile
      replaceInFile resourceStageRead $service $targetFile
      replaceInFile resourceStageUpdate $service $targetFile
      replaceInFile resourceStageDelete $service $targetFile
      replaceInFile validHTTPMethod $service $targetFile
      replaceInFile resourceVPCLinkCreate $service $targetFile
      replaceInFile resourceVPCLinkRead $service $targetFile
      replaceInFile resourceVPCLinkUpdate $service $targetFile
      replaceInFile resourceVPCLinkDelete $service $targetFile

      replaceInFile "ResourceDomainName(" $service $targetFile
      replaceInFile "ResourceDeployment(" $service $targetFile
      replaceInFile "ResourceAuthorizer(" $service $targetFile
      replaceInFile "DataSourceExport(" $service $targetFile
      replaceInFile "ResourceIntegration(" $service $targetFile
      replaceInFile "ResourceModel(" $service $targetFile
      replaceInFile "ResourceStage(" $service $targetFile
      replaceInFile "ResourceVPCLink(" $service $targetFile
      replaceInFile "ResourceIntegrationResponse(" $service $targetFile
    fi

    if [ "$(isInList $service apigateway apigatewayv2 appsync)" == "1" ]; then
      replaceInFile resourceAPIKeyCreate $service $targetFile
      replaceInFile resourceAPIKeyRead $service $targetFile
      replaceInFile resourceAPIKeyUpdate $service $targetFile
      replaceInFile resourceAPIKeyDelete $service $targetFile
      replaceInFile testAccCheckAPIKeyExists $service $targetFile
      replaceInFile testAccCheckAPIKeyDestroy $service $targetFile
      replaceInFile "ResourceAPIKey(" $service $targetFile
    fi

    if [ "$(isInList $service apigateway apigatewayv2 ec2)" == "1" ]; then
      replaceInFile testAccCheckRouteExists $service $targetFile
      replaceInFile testAccCheckRouteDestroy $service $targetFile
      replaceInFile testAccCheckTagDestroy $service $targetFile
      replaceInFile resourceRouteCreate $service $targetFile
      replaceInFile resourceRouteRead $service $targetFile
      replaceInFile resourceRouteUpdate $service $targetFile
      replaceInFile resourceRouteDelete $service $targetFile
      replaceInFile resourceRouteImport $service $targetFile
      replaceInFile "ResourceRoute(" $service $targetFile
    fi

    if [ "$(isInList $service applicationautoscaling autoscaling resourcegroups iam)" == "1" ]; then
      replaceInFile getPutScalingPolicyInput $service $targetFile
      replaceInFile getPolicy $service $targetFile
      replaceInFile testAccCheckGroupDestroy $service $targetFile
      replaceInFile testAccGroupConfig $service $targetFile
      replaceInFile resourceGroupCreate $service $targetFile
      replaceInFile resourceGroupRead $service $targetFile
      replaceInFile resourceGroupUpdate $service $targetFile
      replaceInFile resourceGroupDelete $service $targetFile
      replaceInFile dataSourceGroupRead $service $targetFile
      replaceInFile dataSourceGroupsRead $service $targetFile
      replaceInFile "DataSourceGroup(" $service $targetFile
      replaceInFile "DataSourceGroups(" $service $targetFile
    fi

    if [ "$(isInList $service applicationautoscaling autoscaling elb elbv2 iam iot organizations)" == "1" ]; then
      replaceInFile resourcePolicyCreate $service $targetFile
      replaceInFile resourcePolicyRead $service $targetFile
      replaceInFile resourcePolicyUpdate $service $targetFile
      replaceInFile resourcePolicyDelete $service $targetFile
      replaceInFile resourcePolicyImport $service $targetFile
      replaceInFile testAccCheckPolicyExists $service $targetFile
      replaceInFile "ResourceGroup(" $service $targetFile
      replaceInFile "ResourcePolicy(" $service $targetFile
    fi

    if [[ $service == elb* ]]; then
      replaceInFile testAccCheckLoadBalancerExists $service $targetFile
      replaceInFile testAccCheckLoadBalancerDestroy $service $targetFile
      replaceInFile testAccCheckLoadBalancerDestroy $service $targetFile
      replaceInFile "ResourcePolicy(" $service $targetFile
    fi

    if [[ $service == appstream ]]; then
      replaceInFile resourceStackCreate $service $targetFile
      replaceInFile resourceStackRead $service $targetFile
      replaceInFile resourceStackUpdate $service $targetFile
      replaceInFile resourceStackDelete $service $targetFile
      replaceInFile testAccStackConfig $service $targetFile
      replaceInFile "ResourceStack(" $service $targetFile
    fi

    if [[ "$(isInList $service appsync cloudfront lambda)" == "1" ]]; then
      replaceInFile resourceFunctionCreate $service $targetFile
      replaceInFile resourceFunctionRead $service $targetFile
      replaceInFile resourceFunctionUpdate $service $targetFile
      replaceInFile resourceFunctionDelete $service $targetFile
      replaceInFile testAccCheckFunctionExists $service $targetFile
      replaceInFile testAccCheckTypeExists $service $targetFile
      replaceInFile "ResourceFunction(" $service $targetFile
    fi

    if [[ "$(isInList $service appsync amplify cloudformation cloudtrail codepipeline emr)" == "1" ]]; then
      replaceInFile testAccCheckDestroy $service $targetFile
    fi

    if [[ "$service" == cloudwatchlogs ]]; then
      replaceInFile testAccCheckResourcePolicyDestroy $service $targetFile
    fi

    if [[ "$service" == amplify ]]; then
      replaceInFile testAccCheckWebhookDestroy $service $targetFile
      replaceInFile testAccCheckWebhookExists $service $targetFile
      replaceInFile testAccCheckAppDestroy $service $targetFile
      replaceInFile testAccCheckAppExists $service $targetFile
      replaceInFile testAccCheckAppRecreated $service $targetFile
      replaceInFile testAccAppNameConfig $service $targetFile
      replaceInFile testAccAppTags1Config $service $targetFile
      replaceInFile testAccAppTags2Config $service $targetFile
    fi

    if [[ "$service" == codecommit ]]; then
      replaceInFile testAccRepositoryTags1Config $service $targetFile
      replaceInFile testAccRepositoryTags2Config $service $targetFile
      replaceInFile testAccCheckRepositoryDataSourceConfig $service $targetFile
    fi

    if [[ "$service" == codepipeline ]]; then
      replaceInFile testAccCheckWebhookExists $service $targetFile
    fi

    if [[ "$(isInList $service ec2 ecs dynamodb)" == "1" ]]; then
      replaceInFile resourceTagCreate $service $targetFile
      replaceInFile resourceTagRead $service $targetFile
      replaceInFile resourceTagUpdate $service $targetFile
      replaceInFile resourceTagDelete $service $targetFile
      replaceInFile testAccCheckTagDestroy $service $targetFile
      replaceInFile testAccCheckTagExists $service $targetFile
      replaceInFile "ResourceTag(" $service $targetFile
    fi

    if [ "$(isInList $service codecommit ecr)" == "1" ]; then
      replaceInFile resourceRepositoryCreate $service $targetFile
      replaceInFile resourceRepositoryRead $service $targetFile
      replaceInFile resourceRepositoryUpdate $service $targetFile
      replaceInFile resourceRepositoryDelete $service $targetFile
      replaceInFile dataSourceRepositoryRead $service $targetFile
      replaceInFile "ResourceRepository(" $service $targetFile
      replaceInFile "DataSourceRepository(" $service $targetFile
    fi

    if [ "$(isInList $service docdb ecs elasticache neptune rds redshift)" == "1" ]; then
      replaceInFile resourceSubnetGroupUpdate $service $targetFile
      replaceInFile resourceSubnetGroupDelete $service $targetFile
      replaceInFile resourceSubnetGroupRead $service $targetFile
      replaceInFile resourceSubnetGroupCreate $service $targetFile
      replaceInFile resourceClusterStateRefreshFunc $service $targetFile
      replaceInFile resourceEventSubscriptionRetrieve $service $targetFile
      replaceInFile resourceParameterGroupCreate $service $targetFile
      replaceInFile resourceParameterGroupRead $service $targetFile
      replaceInFile resourceParameterGroupUpdate $service $targetFile
      replaceInFile resourceParameterGroupDelete $service $targetFile
      replaceInFile resourceParameterHash $service $targetFile
      replaceInFile resourceSecurityGroupCreate $service $targetFile
      replaceInFile resourceSecurityGroupRead $service $targetFile
      replaceInFile resourceSecurityGroupDelete $service $targetFile
      replaceInFile resourceSecurityGroupUpdate $service $targetFile
      replaceInFile resourceSecurityGroupRetrieve $service $targetFile
      replaceInFile resourceSecurityGroupIngressHash $service $targetFile
      replaceInFile resourceSecurityGroupAuthorizeRule $service $targetFile
      replaceInFile resourceSecurityGroupStateRefreshFunc $service $targetFile
      replaceInFile testAccCheckParameterGroupExists $service $targetFile
      replaceInFile "ResourceSubnetGroup(" $service $targetFile
      replaceInFile "ExpandParameters(" $service $targetFile
      replaceInFile "FlattenParameters(" $service $targetFile
      replaceInFile "ResourceSecurityGroup(" $service $targetFile
      replaceInFile "ResourceParameterGroup(" $service $targetFile
    fi

    if [ "$(isInList $service docdb ecs eks elasticache emr kafka neptune rds)" == "1" ]; then
      replaceInFile resourceClusterImport $service $targetFile
      replaceInFile resourceClusterCreate $service $targetFile
      replaceInFile resourceClusterRead $service $targetFile
      replaceInFile resourceClusterUpdate $service $targetFile
      replaceInFile resourceClusterDelete $service $targetFile
      replaceInFile testAccCheckClusterExists $service $targetFile
      replaceInFile testAccCheckClusterDestroy $service $targetFile
      replaceInFile testAccCheckClusterNotRecreated $service $targetFile
      replaceInFile testAccCheckClusterRecreated $service $targetFile
      replaceInFile testAccCheckClusterInstanceExists $service $targetFile
      replaceInFile testAccCheckClusterInstanceAttributes $service $targetFile
      replaceInFile testAccClusterInstanceConfig $service $targetFile
      replaceInFile testAccClusterInstanceModifiedConfig $service $targetFile
      replaceInFile testAccClusterTags1Config $service $targetFile
      replaceInFile testAccClusterTags2Config $service $targetFile
      replaceInFile testAccClusterConfig $service $targetFile
      replaceInFile dataSourceClusterRead $service $targetFile
      replaceInFile statusCluster $service $targetFile
      replaceInFile waitClusterDeleted $service $targetFile
      replaceInFile waitClusterCreated $service $targetFile
      replaceInFile "DataSourceCluster(" $service $targetFile
      replaceInFile "ResourceCluster(" $service $targetFile
    fi

    if [ "$(isInList $service docdb neptune rds)" == "1" ]; then
      replaceInFile resourceClusterInstanceCreate $service $targetFile
      replaceInFile resourceClusterInstanceRead $service $targetFile
      replaceInFile resourceClusterInstanceUpdate $service $targetFile
      replaceInFile resourceClusterInstanceDelete $service $targetFile
      replaceInFile resourceClusterInstanceCreateUpdatePendingStates $service $targetFile
      replaceInFile resourceClusterInstanceDeletePendingStates $service $targetFile
      replaceInFile resourceInstanceStateRefreshFunc $service $targetFile
      replaceInFile resourceInstanceRetrieve $service $targetFile
      replaceInFile resourceClusterParameterGroupCreate $service $targetFile
      replaceInFile resourceClusterParameterGroupRead $service $targetFile
      replaceInFile resourceClusterParameterGroupUpdate $service $targetFile
      replaceInFile resourceClusterParameterGroupDelete $service $targetFile
      replaceInFile resourceClusterSnapshotCreate $service $targetFile
      replaceInFile resourceClusterSnapshotRead $service $targetFile
      replaceInFile resourceClusterSnapshotDelete $service $targetFile
      replaceInFile resourceClusterSnapshotStateRefreshFunc $service $targetFile
      replaceInFile testAccClusterInstanceConfig_az $service $targetFile
      replaceInFile testAccClusterInstanceConfig_namePrefix $service $targetFile
      replaceInFile testAccClusterInstanceConfig_generatedName $service $targetFile
      replaceInFile testAccClusterInstanceKMSKeyConfig $service $targetFile
      replaceInFile testAccCheckClusterParameterGroupDestroy $service $targetFile
      replaceInFile testAccCheckClusterParameterGroupAttributes $service $targetFile
      replaceInFile testAccCheckClusterParameterGroupExists $service $targetFile
      replaceInFile testAccClusterParameterGroupConfig $service $targetFile
      replaceInFile testAccClusterParameterGroupConfig_namePrefix $service $targetFile
      replaceInFile testAccClusterParameterGroupConfig_generatedName $service $targetFile
      replaceInFile testAccClusterParameterGroupConfig_Description $service $targetFile
      replaceInFile testAccClusterParameterGroupConfig_Parameter $service $targetFile
      replaceInFile testAccClusterParameterGroupConfig_Tags $service $targetFile
      replaceInFile testAccClusterSnapshotConfig $service $targetFile
      replaceInFile testAccClusterBaseConfig $service $targetFile
      replaceInFile testAccEngineVersionPreCheck $service $targetFile
      replaceInFile testAccEngineVersionBasicDataSourceConfig $service $targetFile
      replaceInFile testAccEngineVersionPreferredDataSourceConfig $service $targetFile
      replaceInFile testAccEngineVersionDefaultOnlyDataSourceConfig $service $targetFile
      replaceInFile testAccPreCheckOrderableDBInstance $service $targetFile
      replaceInFile testAccOrderableDBInstancePreferredDataSourceConfig $service $targetFile
      replaceInFile testAccCheckParameterGroupDestroy $service $targetFile
      replaceInFile testAccCheckParameterGroupAttributes $service $targetFile
      replaceInFile testAccCheckParameterGroupExists $service $targetFile
      replaceInFile testAccOrderableDBInstanceBasicDataSourceConfig $service $targetFile
      replaceInFile testAccCheckClusterEndpointDestroy $service $targetFile
      replaceInFile testAccCheckClusterEndpointDestroyWithProvider $service $targetFile
      replaceInFile testAccCheckClusterEndpointExists $service $targetFile
      replaceInFile testAccCheckClusterEndpointExistsWithProvider $service $targetFile
      replaceInFile testAccClusterEndpointBaseConfig $service $targetFile
      replaceInFile testAccClusterEndpointConfig $service $targetFile
      replaceInFile testAccClusterEndpointTags1Config $service $targetFile
      replaceInFile testAccClusterEndpointTags2Config $service $targetFile
      replaceInFile testAccCheckClusterDestroyWithProvider $service $targetFile
      replaceInFile testAccCheckClusterSnapshot $service $targetFile
      replaceInFile testAccCheckClusterExistsWithProvider $service $targetFile
      replaceInFile testAccClusterWithFinalSnapshotConfig $service $targetFile
      replaceInFile testAccClusterConfig_kmsKey $service $targetFile
      replaceInFile testAccClusterConfig_encrypted $service $targetFile
      replaceInFile testAccClusterConfig_backups $service $targetFile
      replaceInFile testAccClusterConfig_backupsUpdate $service $targetFile
      replaceInFile testAccClusterConfig_iamAuth $service $targetFile
      replaceInFile testAccClusterIncludingIAMRolesConfig $service $targetFile
      replaceInFile testAccClusterConfig_Port $service $targetFile
      replaceInFile testAccClusterAddIAMRolesConfig $service $targetFile
      replaceInFile testAccClusterRemoveIAMRolesConfig $service $targetFile
      replaceInFile testAccCheckEventSubscriptionExists $service $targetFile
      replaceInFile testAccCheckEventSubscriptionDestroy $service $targetFile
      replaceInFile TestValidEventSubscriptionName $service $targetFile
      replaceInFile TestValidParamGroupName $service $targetFile
      replaceInFile TestValidSubnetGroupName $service $targetFile
      replaceInFile TestValidSubnetGroupNamePrefix $service $targetFile
      replaceInFile resourceClusterStateRefreshFunc $service $targetFile
      replaceInFile resourceClusterCreatePendingStates $service $targetFile
      replaceInFile resourceClusterDeletePendingStates $service $targetFile
      replaceInFile resourceClusterUpdatePendingStates $service $targetFile
      replaceInFile dataSourceEngineVersionRead $service $targetFile
      replaceInFile dataSourceOrderableDBInstanceRead $service $targetFile
      replaceInFile resourceClusterEndpointCreate $service $targetFile
      replaceInFile resourceClusterEndpointRead $service $targetFile
      replaceInFile resourceClusterEndpointUpdate $service $targetFile
      replaceInFile resourceClusterEndpointDelete $service $targetFile
      replaceInFile resourceEventSubscriptionCreate $service $targetFile
      replaceInFile resourceEventSubscriptionRead $service $targetFile
      replaceInFile resourceEventSubscriptionUpdate $service $targetFile
      replaceInFile resourceEventSubscriptionDelete $service $targetFile
      replaceInFile resourceGlobalClusterCreate $service $targetFile
      replaceInFile resourceGlobalClusterRead $service $targetFile
      replaceInFile resourceGlobalClusterUpdate $service $targetFile
      replaceInFile resourceGlobalClusterDelete $service $targetFile
      replaceInFile flattenGlobalClusterMembers $service $targetFile
      replaceInFile waitForGlobalClusterCreation $service $targetFile
      replaceInFile waitForGlobalClusterUpdate $service $targetFile
      replaceInFile waitForGlobalClusterRemoval $service $targetFile
      replaceInFile WaitForGlobalClusterDeletion $service $targetFile
      replaceInFile validEngine $service $targetFile
      replaceInFile validIdentifier $service $targetFile
      replaceInFile validIdentifierPrefix $service $targetFile
      replaceInFile validParamGroupName $service $targetFile
      replaceInFile validParamGroupNamePrefix $service $targetFile
      replaceInFile validSubnetGroupName $service $targetFile
      replaceInFile validSubnetGroupNamePrefix $service $targetFile
      replaceInFile validEventSubscriptionName $service $targetFile
      replaceInFile "ResourceClusterParameterGroup(" $service $targetFile
      replaceInFile "ResourceClusterInstance(" $service $targetFile
      replaceInFile "ResourceClusterSnapshot(" $service $targetFile
      replaceInFile "DataSourceEngineVersion(" $service $targetFile
      replaceInFile "DataSourceOrderableDBInstance(" $service $targetFile
      replaceInFile "ResourceClusterEndpoint(" $service $targetFile
      replaceInFile "ResourceEventSubscription(" $service $targetFile
      replaceInFile "ResourceGlobalCluster(" $service $targetFile
      replaceInFile "ResourceGlobalCluster(" $service $targetFile
    fi

    if [ "$(isInList $service docdb elasticache ec2 neptune rds)" == "1" ]; then
      replaceInFile testAccSecurityGroupConfig $service $targetFile
      replaceInFile testAccInstanceDataSourceConfig $service $targetFile
      replaceInFile resourceInstanceCreate $service $targetFile
      replaceInFile resourceInstanceRead $service $targetFile
      replaceInFile resourceInstanceDelete $service $targetFile
      replaceInFile resourceInstanceUpdate $service $targetFile
      replaceInFile "ResourceInstance(" $service $targetFile
      replaceInFile "DataSourceInstance(" $service $targetFile
    fi

    if [ "$(isInList $service appconfig elasticbeanstalk elb kinesisanalytics kinesisanalyticsv2)" == "1" ]; then
      replaceInFile resourceApplicationCreate $service $targetFile
      replaceInFile resourceApplicationUpdate $service $targetFile
      replaceInFile resourceApplicationRead $service $targetFile
      replaceInFile resourceApplicationDelete $service $targetFile
      replaceInFile resourceEnvironmentCreate $service $targetFile
      replaceInFile resourceEnvironmentUpdate $service $targetFile
      replaceInFile resourceEnvironmentRead $service $targetFile
      replaceInFile resourceEnvironmentDelete $service $targetFile
      replaceInFile flattenInstances $service $targetFile
      replaceInFile "ResourceEnvironment(" $service $targetFile
      replaceInFile "ResourceApplication(" $service $targetFile
    fi

    if [ "$(isInList $service cloudsearch elasticsearch firehose opensearch)" == "1" ]; then
      replaceInFile expandDomainEndpointOptions $service $targetFile
      replaceInFile flattenDomainEndpointOptions $service $targetFile
      replaceInFile testAccPreCheckIamServiceLinkedRoleEs $service $targetFile
    fi

    if [ "$(isInList $service cloudtrail dynamodb)" == "1" ]; then
      replaceInFile testAccTagsConfig $service $targetFile
      replaceInFile testAccCheckTagExists $service $targetFile
    fi

    if [ "$(isInList $service cloudsearch amplify elasticsearch sagemaker)" == "1" ]; then
      replaceInFile testAccApp_basic $service $targetFile
      replaceInFile testAccApp_disappears $service $targetFile
      replaceInFile testAccCheckDomainDestroy $service $targetFile
      replaceInFile testAccCheckDomainExists $service $targetFile
      replaceInFile resourceAppCreate $service $targetFile
      replaceInFile resourceAppRead $service $targetFile
      replaceInFile resourceAppUpdate $service $targetFile
      replaceInFile resourceAppDelete $service $targetFile resourceAppRead
      replaceInFile resourceDomainCreate $service $targetFile resourceAppRead
      replaceInFile resourceDomainRead $service $targetFile resourceAppRead
      replaceInFile resourceDomainUpdate $service $targetFile resourceAppRead
      replaceInFile resourceDomainDelete $service $targetFile resourceAppRead
      replaceInFile "ResourceApp(" $service $targetFile
      replaceInFile "ResourceDomain(" $service $targetFile
    fi

    if [ "$(isInList $service autoscaling elasticache iam)" == "1" ]; then
      replaceInFile testAccCheckUserDestroy $service $targetFile
      replaceInFile testAccCheckUserExists $service $targetFile
      replaceInFile resourceUserCreate $service $targetFile
      replaceInFile resourceUserRead $service $targetFile
      replaceInFile resourceUserUpdate $service $targetFile
      replaceInFile resourceUserDelete $service $targetFile
      replaceInFile dataSourceUserRead $service $targetFile
      replaceInFile "ResourceUser(" $service $targetFile
      replaceInFile "DataSourceUser(" $service $targetFile
    fi

    if [ "$(isInList $service appautoscaling autoscaling ec2 elasticache rds redshift)" == "1" ]; then
      replaceInFile testAccCheckSecurityGroupExists $service $targetFile
      replaceInFile testAccCheckSecurityGroupDestroy $service $targetFile
      replaceInFile testAccCheckScheduledActionExists $service $targetFile
      replaceInFile testAccCheckScheduledActionDestroy $service $targetFile
      replaceInFile userDataHashSum $service $targetFile
      replaceInFile resourceScheduledActionRead $service $targetFile
      replaceInFile resourceScheduledActionDelete $service $targetFile
      replaceInFile "ResourceScheduledAction(" $service $targetFile
    fi

    if [ "$(isInList $service elb iam iot)" == "1" ]; then
      replaceInFile testAccCheckPolicyAttachmentExists $service $targetFile
      replaceInFile resourceCertificateUpdate $service $targetFile
      replaceInFile resourceCertificateDelete $service $targetFile
      replaceInFile allservices $service $targetFile
      replaceInFile resourcePolicyAttachmentCreate $service $targetFile
      replaceInFile resourcePolicyAttachmentRead $service $targetFile
      replaceInFile resourcePolicyAttachmentDelete $service $targetFile
      replaceInFile testAccCheckPolicyExists $service $targetFile
      replaceInFile "ResourcePolicyAttachment(" $service $targetFile
    fi

    if [ "$(isInList $service ecr ecs lambda s3)" == "1" ]; then
      replaceInFile testAccErrorCheckSkip $service $targetFile
    fi

    if [ "$(isInList $service cognitoidp elasticache iam)" == "1" ]; then
      replaceInFile resourceUserGroupCreate $service $targetFile
      replaceInFile resourceUserGroupRead $service $targetFile
      replaceInFile resourceUserGroupUpdate $service $targetFile
      replaceInFile resourceUserGroupDelete $service $targetFile
      replaceInFile testAccCheckUserGroupDestroy $service $targetFile
      replaceInFile testAccCheckUserGroupExists $service $targetFile
      replaceInFile "ResourceUserGroup(" $service $targetFile
    fi

    if [ "$(isInList $service route53resolver sagemaker)" == "1" ]; then
      replaceInFile resourceEndpointCreate $service $targetFile
      replaceInFile resourceEndpointRead $service $targetFile
      replaceInFile resourceEndpointUpdate $service $targetFile
      replaceInFile resourceEndpointDelete $service $targetFile
      replaceInFile "ResourceEndpoint(" $service $targetFile
    fi

    if [ "$(isInList $service elasticsearch sagemaker)" == "1" ]; then
      replaceInFile "FindDomainByName(" $service $targetFile
    fi

    if [ "$(isInList $service events eks)" == "1" ]; then
      replaceInFile allDiagFunc $service $targetFile
    fi

    if [ "$(isInList $service emr s3)" == "1" ]; then
      replaceInFile removeNil $service $targetFile
    fi

    if [ "$(isInList $service emr glue redshift)" == "1" ]; then
      replaceInFile resourceSecurityConfigurationCreate $service $targetFile
      replaceInFile resourceSecurityConfigurationRead $service $targetFile
      replaceInFile resourceSecurityConfigurationDelete $service $targetFile
      replaceInFile "FindClusterByID(" $service $targetFile
      replaceInFile "ResourceSecurityConfiguration(" $service $targetFile
    fi

    if [ "$(isInList $service kafka neptune redshift rds)" == "1" ]; then
      replaceInFile testAccClusterDataSourceConfig $service $targetFile
      replaceInFile testAccClusterConfigTags1 $service $targetFile
      replaceInFile testAccClusterConfigTags2 $service $targetFile
      replaceInFile testAccEventSubscriptionConfig $service $targetFile
      replaceInFile testAccEventSubscriptionUpdateConfig $service $targetFile
      replaceInFile testAccEventSubscriptionWithSourceIDsConfig $service $targetFile
      replaceInFile testAccEventSubscriptionUpdateSourceIDsConfig $service $targetFile
      replaceInFile testAccClusterConfig_basic $service $targetFile
      replaceInFile testAccEventSubscriptionUpdateCategoriesConfig $service $targetFile
      replaceInFile testAccCheckParameterGroupDestroy $service $targetFile
      replaceInFile testAccParameterGroupOnlyConfig $service $targetFile
      replaceInFile testAccParameterGroupConfig $service $targetFile
      replaceInFile testAccCheckSecurityGroupExists $service $targetFile
      replaceInFile testAccCheckSecurityGroupDestroy $service $targetFile
      replaceInFile TestExpandParameters $service $targetFile
      replaceInFile TestFlattenParameters $service $targetFile
    fi

    if [ "$(isInList $service codecommit glue)" == "1" ]; then
      replaceInFile resourceTriggerCreate $service $targetFile
      replaceInFile resourceTriggerRead $service $targetFile
      replaceInFile resourceTriggerDelete $service $targetFile
      replaceInFile "ResourceTrigger(" $service $targetFile
    fi

    if [ "$(isInList $service iot events route53 route53resolver)" == "1" ]; then
      replaceInFile testAccErrorCheckSkipRoute53 $service $targetFile
      replaceInFile dataSourceEndpointRead $service $targetFile
      replaceInFile "DataSourceEndpoint(" $service $targetFile
    fi

    if [ "$(isInList $service events route53resolver)" == "1" ]; then
      replaceInFile resourceRuleCreate $service $targetFile
      replaceInFile resourceRuleRead $service $targetFile
      replaceInFile resourceRuleUpdate $service $targetFile
      replaceInFile resourceRuleDelete $service $targetFile
      replaceInFile "ResourceRule(" $service $targetFile
    fi

    if [ "$(isInList $service s3 s3control)" == "1" ]; then
      replaceInFile testAccCheckBucketLifecycleConfigurationDestroy $service $targetFile
      replaceInFile testAccCheckBucketDestroy $service $targetFile
      replaceInFile testAccCheckBucketExists $service $targetFile
      replaceInFile testAccCheckBucketLifecycleConfigurationExists $service $targetFile
      replaceInFile resourceBucketCreate $service $targetFile
      replaceInFile resourceBucketRead $service $targetFile
      replaceInFile resourceBucketUpdate $service $targetFile
      replaceInFile resourceBucketDelete $service $targetFile
      replaceInFile resourceBucketLifecycleConfigurationCreate $service $targetFile
      replaceInFile resourceBucketLifecycleConfigurationRead $service $targetFile
      replaceInFile resourceBucketLifecycleConfigurationUpdate $service $targetFile
      replaceInFile resourceBucketLifecycleConfigurationDelete $service $targetFile
      replaceInFile resourceBucketPolicyCreate $service $targetFile
      replaceInFile resourceBucketPolicyRead $service $targetFile
      replaceInFile resourceBucketPolicyUpdate $service $targetFile
      replaceInFile resourceBucketPolicyDelete $service $targetFile
      replaceInFile "ResourceBucket(" $service $targetFile
      replaceInFile "ResourceBucketPolicy(" $service $targetFile
      replaceInFile "ResourceBucketLifecycleConfiguration(" $service $targetFile
    fi

    if [ "$(isInList $service efs kinesisanalyticsv2 s3control)" == "1" ]; then
      replaceInFile resourceAccessPointCreate $service $targetFile
      replaceInFile resourceAccessPointRead $service $targetFile
      replaceInFile resourceAccessPointUpdate $service $targetFile
      replaceInFile resourceAccessPointDelete $service $targetFile
      replaceInFile expandVPCConfiguration $service $targetFile
      replaceInFile "ResourceAccessPoint(" $service $targetFile
    fi

    if [ "$(isInList $service events glue)" == "1" ]; then
      replaceInFile resourceConnectionCreate $service $targetFile
      replaceInFile resourceConnectionRead $service $targetFile
      replaceInFile resourceConnectionUpdate $service $targetFile
      replaceInFile resourceConnectionDelete $service $targetFile
      replaceInFile dataSourceConnectionRead $service $targetFile
      replaceInFile testAccCheckConnectionExists $service $targetFile
      replaceInFile "ResourceConnection(" $service $targetFile
      replaceInFile "DataSourceConnection(" $service $targetFile
      replaceInFile "FindConnectionByName(" $service $targetFile
    fi

    if [ "$(isInList $service appautoscaling autoscaling elb elbv2)" == "1" ]; then
      replaceInFile resourceAttachmentCreate $service $targetFile
      replaceInFile resourceAttachmentRead $service $targetFile
      replaceInFile resourceAttachmentDelete $service $targetFile
      replaceInFile resourceAttachmentDelete $service $targetFile
      replaceInFile resourceLoadBalancerCreate $service $targetFile
      replaceInFile resourceLoadBalancerRead $service $targetFile
      replaceInFile resourceLoadBalancerUpdate $service $targetFile
      replaceInFile resourceLoadBalancerDelete $service $targetFile
      replaceInFile dataSourceLoadBalancerRead $service $targetFile
      replaceInFile testAccCheckPolicyDestroy $service $targetFile
      replaceInFile testAccCheckPolicyDisappears $service $targetFile
      replaceInFile "ResourceAttachment(" $service $targetFile
      replaceInFile "ResourceLoadBalancer(" $service $targetFile
      replaceInFile "DataSourceLoadBalancer(" $service $targetFile
    fi

    if [ "$(isInList $service ec2 elbv2)" == "1" ]; then
      replaceInFile testAccPreCheckElbv2GatewayLoadBalancer $service $targetFile
    fi

    if [ "$(isInList $service cloudtrail elb elbv2 redshift)" == "1" ]; then
      replaceInFile dataSourceServiceAccountRead $service $targetFile
      replaceInFile ServiceAccountPerRegionMap $service $targetFile
      replaceInFile "DataSourceServiceAccount(" $service $targetFile
    fi

    if [ "$(isInList $service cloudformation cloudfront docdb)" == "1" ]; then
      replaceInFile expandParameters $service $targetFile
      replaceInFile flattenParameters $service $targetFile
    fi

    if [ "$(isInList $service apigateway iot)" == "1" ]; then
      replaceInFile testAccAuthorizerBaseConfig $service $targetFile
      replaceInFile resourceAuthorizerCustomizeDiff $service $targetFile
    fi

    if [ "$(isInList $service events appautoscaling)" == "1" ]; then
      replaceInFile resourceTargetRead $service $targetFile
      replaceInFile resourceTargetDelete $service $targetFile
      replaceInFile resourceTargetImport $service $targetFile
      replaceInFile testAccCheckTargetExists $service $targetFile
      replaceInFile testAccCheckTargetDestroy $service $targetFile
      replaceInFile testAccTargetImportStateIdFunc $service $targetFile
      replaceInFile testAccTargetConfig $service $targetFile
      replaceInFile "ResourceTarget(" $service $targetFile
    fi

    if [ "$(isInList $service batch backup cloudwatch docdb dynamodb elb elbv2 events kms sagemaker)" == "1" ]; then
      replaceInFile validName $service $targetFile
      replaceInFile validNamePrefix $service $targetFile
      replaceInFile "TestValidName(" $service $targetFile
      replaceInFile "TestValidNamePrefix(" $service $targetFile
    fi

    if [ "$(isInList $service backup glacier)" == "1" ]; then
      replaceInFile resourceVaultCreate $service $targetFile
      replaceInFile resourceVaultUpdate $service $targetFile
      replaceInFile resourceVaultRead $service $targetFile
      replaceInFile resourceVaultDelete $service $targetFile
      replaceInFile testAccCheckVaultExists $service $targetFile
      replaceInFile testAccCheckVaultDestroy $service $targetFile
      replaceInFile "ResourceVault(" $service $targetFile
    fi

    if [ "$(isInList $service events glue)" == "1" ]; then
      replaceInFile testAccCheckConnectionExists $service $targetFile
      replaceInFile testAccCheckConnectionDestroy $service $targetFile
    fi

    if [ "$(isInList $service apigateway lakeformation)" == "1" ]; then
      replaceInFile resourceResourceCreate $service $targetFile
      replaceInFile resourceResourceRead $service $targetFile
      replaceInFile resourceResourceDelete $service $targetFile
      replaceInFile dataSourceResourceRead $service $targetFile
      replaceInFile testAccCheckResourceExists $service $targetFile
      replaceInFile testAccCheckResourceDestroy $service $targetFile
      replaceInFile "ResourceResource(" $service $targetFile
      replaceInFile "DataSourceResource(" $service $targetFile
    fi

    if [ "$(isInList $service batch ec2)" == "1" ]; then
      replaceInFile testAccCheckLaunchTemplateDestroy $service $targetFile
    fi

    if [ "$(isInList $service appconfig kinesisanalytics kinesisanalyticsv2)" == "1" ]; then
      replaceInFile testAccCheckApplicationExists $service $targetFile
      replaceInFile waitApplicationDeleted $service $targetFile
      replaceInFile waitApplicationStarted $service $targetFile
      replaceInFile waitApplicationStopped $service $targetFile
      replaceInFile waitApplicationUpdated $service $targetFile
      replaceInFile waitIAMPropagation $service $targetFile
      replaceInFile statusApplication $service $targetFile
      replaceInFile resourceApplicationImport $service $targetFile
      replaceInFile "FindApplicationDetailByName(" $service $targetFile
      replaceInFile "FindApplicationDetail(" $service $targetFile
    fi

    if [ "$(isInList $service acm cloudformation iam kms)" == "1" ]; then
      replaceInFile ARNSeparator $service $targetFile
      replaceInFile ARNService $service $targetFile
      replaceInFile ResourceGroup $service $targetFile
      replaceInFile PropagationTimeout $service $targetFile
      replaceInFile stripCR $service $targetFile
    fi

    if [ "$(isInList $service autoscaling cloudtrail elb iam organizations)" == "1" ]; then
      replaceInFile testAccCheckGroupAttributes $service $targetFile
      replaceInFile testAccCheckGroupExists $service $targetFile
      replaceInFile testAccCheckPolicyDestroy $service $targetFile
      replaceInFile testAccPolicyImportStateIdFunc $service $targetFile
      replaceInFile testAccOrganizationConfig $service $targetFile
      replaceInFile testAccCheckPolicyAttachmentDestroy $service $targetFile
      replaceInFile "ResourceGroup(" $service $targetFile
    fi

    if [ "$(isInList $service autoscaling ec2)" == "1" ]; then
      replaceInFile testAccCheckAmiExists $service $targetFile
    fi

    if [ "$(isInList $service rds ec2)" == "1" ]; then
      replaceInFile dataSourceInstanceRead $service $targetFile
      replaceInFile testAccCheckInstanceDestroy $service $targetFile
      replaceInFile testAccCheckInstanceNotRecreated $service $targetFile
      replaceInFile testAccCheckInstanceExists $service $targetFile
      replaceInFile testAccCheckSecurityGroupAttributes $service $targetFile
    fi

    if [ "$(isInList $service apigateway organizations)" == "1" ]; then
      replaceInFile testAccCheckAccountDestroy $service $targetFile
      replaceInFile testAccCheckAccountExists $service $targetFile
      replaceInFile resourceAccountRead $service $targetFile
      replaceInFile resourceAccountUpdate $service $targetFile
      replaceInFile resourceAccountDelete $service $targetFile
      replaceInFile "ResourceAccount(" $service $targetFile
    fi

    if [ "$(isInList $service events lambda)" == "1" ]; then
      replaceInFile resourcePermissionCreate $service $targetFile
      replaceInFile resourcePermissionRead $service $targetFile
      replaceInFile resourcePermissionDelete $service $targetFile
      replaceInFile getPolicyStatement $service $targetFile
      replaceInFile "ResourcePermission(" $service $targetFile
    fi

    if [ "$(isInList $service cloudtrail efs events lambda)" == "1" ]; then
      replaceInFile testAccFileSystemConfig $service $targetFile
      replaceInFile testAccTagsModifiedConfig $service $targetFile
      replaceInFile testAccCheckPermissionExists $service $targetFile
      replaceInFile testAccCheckPermissionDestroy $service $targetFile
    fi

    if [ "$(isInList $service ec2 efs)" == "1" ]; then
      replaceInFile testAccCheckVpnGatewayDestroy $service $targetFile
    fi

    if [ "$(isInList $service apigateway cloudfront)" == "1" ]; then
      replaceInFile cloudFrontRoute53ZoneID $service $targetFile
    fi

    if [ "$(isInList $service cloudfront kms lambda)" == "1" ]; then
      replaceInFile testAccCheckAliasDestroy $service $targetFile
      replaceInFile testAccCheckAliasExists $service $targetFile
      replaceInFile testAccCheckFunctionDestroy $service $targetFile
      replaceInFile resourceAliasCreate $service $targetFile
      replaceInFile resourceAliasRead $service $targetFile
      replaceInFile resourceAliasDelete $service $targetFile
      replaceInFile resourceAliasUpdate $service $targetFile
      replaceInFile dataSourceAliasRead $service $targetFile
      replaceInFile dataSourceFunctionRead $service $targetFile
      replaceInFile testAccBasicConfig $service $targetFile
      replaceInFile testAccFunctionBasicDataSourceConfig $service $targetFile
      replaceInFile "ResourceAlias(" $service $targetFile
      replaceInFile "DataSourceAlias(" $service $targetFile
      replaceInFile "DataSourceFunction(" $service $targetFile
    fi

  done
done

# additional patches
sed -i '' -e 's|acctest.RegisterServiceErrorCheckFunc|// acctest.RegisterServiceErrorCheckFunc|g' $combinedFolder/apigatewayv2_errorcheck_test.go
sed -i '' -e 's|\("github.com/.*/apigatewayv2\)|// \1|g' $combinedFolder/apigatewayv2_errorcheck_test.go
sed -i '' -e 's|acctest.RegisterServiceErrorCheckFunc|// acctest.RegisterServiceErrorCheckFunc|g' $combinedFolder/docdb_cluster_test.go

)
