name: TestNDeploy

on: [push, pull_request]

jobs:
  cache:
    name: Caching
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.8, 3.9, "3.10", "3.11", "3.12", "3.13" ]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get pip cache dir
        id: pip-cache-dir
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: pip cache
        id: pip-cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache-dir.outputs.dir }}
          key: pip-${{ matrix.python-version }}-${{ hashFiles('**/setup.cfg') }}
      - name: Update pip
        if: ${{ steps.pip-cache.outputs.cache-hit != 'true' }}
        run: |
          python -m pip install --upgrade pip
      - name: Install project dependencies
        if: ${{ steps.pip-cache.outputs.cache-hit != 'true' }}
        run: |
          pip install -r requirements-dev.txt

  lint:
    name: Linting
    runs-on: ubuntu-latest
    needs: cache
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12", "3.13"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    # Retrieve the previously cached dependencies
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
    - name: pip cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: pip-${{ matrix.python-version }}-${{ hashFiles('**/setup.cfg') }}
    # Update PIP
    - name: Update pip
      run: |
        python -m pip install --upgrade pip
    # Still need to properly install the dependencies - caching will only skip the download part
    - name: Install project dependencies
      run: |
        pip install -r requirements-dev.txt
    - name: Lint
      run: |
        mkdir .mypy_cache
        make lint

  javatest:
    needs: lint
    uses: ./.github/workflows/tests_sdk_java.yml

  jstest:
    needs: lint
    uses: ./.github/workflows/tests_sdk_js.yml

  dotnettest:
    needs: lint
    uses: ./.github/workflows/tests_sdk_dotnet.yml

  rubytest:
    needs: lint
    uses: ./.github/workflows/tests_sdk_ruby.yml

  terraformexamplestest:
    needs: lint
    uses: ./.github/workflows/tests_terraform_examples.yml

  test:
    needs: [lint]
    if: "!contains(github.event.pull_request.labels.*.name, 'java')"
    uses: ./.github/workflows/tests_decoratormode.yml
    secrets: inherit

  testserver:
    needs: [lint]
    if: "!contains(github.event.pull_request.labels.*.name, 'java')"
    uses: ./.github/workflows/tests_servermode.yml
    secrets: inherit

  testproxy:
    needs: [lint]
    if: "!contains(github.event.pull_request.labels.*.name, 'java')"
    uses: ./.github/workflows/tests_proxymode.yml
